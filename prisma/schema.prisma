// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String    @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  role        ROLE
  isOnboarded Boolean
  Shop        Shop?   @relation

  @@map("user")
}

model Shop {
  id          String       @id @default(cuid())
  name        String
  logo        String
  banner      String?
  ownerId     String?      @unique
  owner       User?        @relation(fields: [ownerId], references: [id])
  products    Product[]
  ShopDetails ShopDetails?
}

model ShopDetails {
  id          String   @id @default(cuid())
  description String
  location    String
  contact     String
  socialLinks String[]
  shopId      String   @unique
  shop        Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
}

model Product {
  id             String   @id @default(cuid())
  name           String
  description    String
  designs        String[]
  gender         GENDER   @default(unisex)
  sizes          SIZE[]   @default([])
  price          String
  tags           String[]
  shopId         String
  shop           Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  inStock        Boolean  @default(true)
  remainingStock Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("product")
}

model Session {
  id        String   @id
  userId    String
  token     String
  expiresAt DateTime
  ipAddress String?
  createdAt DateTime
  userAgent String?
  updatedAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum ROLE {
  customer
  admin
  creator
}

enum GENDER {
  male
  female
  unisex
}

enum SIZE {
  XS
  S
  M
  L
  XL
  XXL
}
